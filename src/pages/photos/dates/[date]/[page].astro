---
import BaseLayout from '../../../../layouts/BaseLayout.astro';
import PhotoGallery from '../../../../components/PhotoGallery.astro';
import PaginationNav from '../../../../components/PaginationNav.astro';
import { photoManifestSchema, type PhotoManifestItem } from '../../../../utils/photoManifestSchema';
import type { GetStaticPathsResult, PaginateFunction, Page } from 'astro';

// const manifestUrl = 'https://share.kadykov.com/image_manifest.json'; // Moved inside getStaticPaths

interface Props {
  page: Page<PhotoManifestItem>; // items will have slugs from manifest
  dateDisplay: string;
  fullPhotoDataset: PhotoManifestItem[]; // The dataset for THIS date, with slugs
}

export async function getStaticPaths({ paginate }: { paginate: PaginateFunction }): Promise<GetStaticPathsResult> {
  const PAGE_SIZE = 24; // Define page size inside getStaticPaths
  const manifestUrl = 'https://share.kadykov.com/image_manifest.json'; // Defined inside function
  let allPhotos: PhotoManifestItem[] = [];
  try {
    const response = await fetch(manifestUrl);
    if (!response.ok) throw new Error(`Failed to fetch manifest: ${response.statusText}`);
    const jsonData = await response.json();
    const parsed = photoManifestSchema.safeParse(jsonData);
    if (!parsed.success) {
      console.error('Failed to parse photo manifest for [date] page:', parsed.error.flatten());
      throw new Error('Failed to parse photo manifest for [date] page: ' + parsed.error.toString());
    }
    allPhotos = parsed.data;
  } catch (e) {
    const error = e as Error;
    console.error(`Error processing photo manifest for [date] page: ${error.message}`);
    throw error; // Fail fast
  }

  const photosByDate = new Map<string, PhotoManifestItem[]>();
  allPhotos.forEach(photo => {
    let dateStr: string | null = null;
    if (photo.dateTaken) {
      dateStr = photo.dateTaken.substring(0, 10); // YYYY-MM-DD
    } else if (photo.year && photo.month && photo.day) {
      const monthStr = String(photo.month).padStart(2, '0');
      const dayStr = String(photo.day).padStart(2, '0');
      dateStr = `${photo.year}-${monthStr}-${dayStr}`;
    }

    if (dateStr) {
      if (!photosByDate.has(dateStr)) {
        photosByDate.set(dateStr, []);
      }
      photosByDate.get(dateStr)?.push(photo);
    }
  });

  const paths = [];
  for (const [date, photosOnDate] of photosByDate.entries()) {
    // Sort photos on this specific date by time (if available in dateTaken)
    photosOnDate.sort((a, b) => {
      if (a.dateTaken && b.dateTaken) {
        const dateA = new globalThis.Date(a.dateTaken);
        const dateB = new globalThis.Date(b.dateTaken);

        const timeA = dateA.getTime();
        const timeB = dateB.getTime();

        if (isNaN(timeA) && isNaN(timeB)) return 0; // Both invalid, treat as equal
        if (isNaN(timeA)) return 1;  // Invalid dateA goes to the end
        if (isNaN(timeB)) return -1; // Invalid dateB goes to the end

        return timeA - timeB; // Earliest first for a given day
      }
      return 0;
    });

    const paginatedResult = paginate(photosOnDate, {
      pageSize: PAGE_SIZE,
      params: { date: date },
      props: {
        dateDisplay: date,
        fullPhotoDataset: photosOnDate // Pass ONLY the photos for THIS date
      }
    });
    paths.push(...paginatedResult);
  }
  return paths;
}

// Props interface is now Props defined above
const { page, dateDisplay, fullPhotoDataset } = Astro.props; // Added fullPhotoDataset

const pageTitle = `Photos from ${dateDisplay}`;
const pageDescription = `A collection of photos taken on ${dateDisplay}. Page ${page.currentPage} of ${page.lastPage}.`;
---

<BaseLayout title={pageTitle} description={pageDescription}>
  <div class="container mx-auto px-4 py-8">
    <h1 class="text-heading-1 mb-2 text-center">Photos from {dateDisplay}</h1>

    {page.data && page.data.length > 0 ? (
      <PhotoGallery photos={page.data} fullPhotoDataset={fullPhotoDataset} />
    ) : (
      <p class="text-center">No photos found for this date.</p>
    )}

    <p class="text-center text-meta my-8">
      <a href="/photos/dates" class="btn text-button">View all photo dates</a>
    </p>

    <PaginationNav page={page} /> {/* Replaced inline pagination with component */}
  </div>
</BaseLayout>

---
import BaseLayout from '../../layouts/BaseLayout.astro';
import BlogPost from '../../components/BlogPost.astro';

interface Frontmatter {
    title: string;
    tags: string[];
}

// Define the MarkdownInstance type
interface MarkdownInstance<T> {
    frontmatter: T;
    url: string;
    [key: string]: any; // To allow for other properties that Astro might add
}

export async function getStaticPaths(): Promise<Array<{ params: { tag: string }, props: { posts: MarkdownInstance<Frontmatter>[] } }>> {
    // const allPosts: MarkdownInstance<Frontmatter>[] = await Astro.glob('../posts/*.md');
    const allPosts: MarkdownInstance<Frontmatter>[] = await Astro.glob<MarkdownInstance<Frontmatter>>('../posts/*.md');
    const uniqueTags: string[] = [...new Set(allPosts.map((post) => post.frontmatter.tags).flat())];
    return uniqueTags.map((tag) => {
        const filteredPosts = allPosts.filter((post) => post.frontmatter.tags.includes(tag));
        return {
            params: { tag },
            props: { posts: filteredPosts },
        };
    });
}

const { posts } = Astro.props as { posts: MarkdownInstance<Frontmatter>[] };
const { tag } = Astro.params as { tag: string };

---
<BaseLayout pageTitle={tag}>
    <p>Posts tagged with {tag}</p>
    <ul>
        {posts.map((post) => <BlogPost url={post.url} title={post.frontmatter.title} />)}
    </ul>
</BaseLayout>

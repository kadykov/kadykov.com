---
// src/components/StandaloneShareButton.astro
// A standalone, visible share button component.

// SVG Icons (same as used in photoswipe.js for consistency)
const svgIconFacebook = '<svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="20" height="20"><title>Facebook</title><path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/></svg>';
const svgIconTwitter = '<svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="20" height="20"><title>X</title><path d="M18.901 1.153h3.68l-8.04 9.19L24 22.846h-7.406l-5.8-7.584-6.638 7.584H.474l8.6-9.83L0 1.154h7.594l5.243 6.932ZM17.61 20.644h2.039L6.486 3.24H4.298Z"/></svg>';
const svgIconLinkedIn = '<svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="20" height="20"><title>LinkedIn</title><path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/></svg>';
const svgIconCopy = '<svg viewBox="0 0 24 24" fill="currentColor" width="20" height="20"><path d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z"/></svg>';
const svgIconEmail = '<svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="20" height="20"><title>Email</title><path d="M24 5.457v13.909c0 .904-.732 1.636-1.636 1.636h-3.819V11.73L12 16.64l-6.545-4.91v9.273H1.636A1.636 1.636 0 0 1 0 19.366V5.457c0-2.023 2.309-3.178 3.927-1.964L5.455 4.64 12 9.548l6.545-4.91 1.528-1.145C21.69 2.28 24 3.434 24 5.457z"/></svg>';
const svgIconTelegram = '<svg viewBox="18.5 58.5 100 100" fill="currentColor" xmlns="http://www.w3.org/2000/svg" width="20" height="20"><path fill-rule="evenodd" clip-rule="evenodd" d="M76.33 132.14L62.5 143.73L58.59 144.26L49.84 114.11L19.06 104L113.82 67.8799L118.29 67.9799L103.36 149.19L76.33 132.14ZM100.03 83.1399L56.61 109.17L61.61 130.5L62.98 130.19L68.2 113.73L102.9 83.4799L100.03 83.1399Z"/></svg>';
const svgIconWhatsApp = '<svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="20" height="20"><title>WhatsApp</title><path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413Z"/></svg>';


interface Props {
  shareUrl?: string;
  shareTitle?: string;
  buttonClass?: string;
  buttonLabel?: string;
  dropdownAlignment?: 'dropdown-end' | 'dropdown-left' | 'dropdown-center' | 'dropdown-right' | 'dropdown-top' | 'dropdown-bottom';
}

const {
  shareUrl,
  shareTitle,
  buttonClass = "btn btn-outline",
  buttonLabel = "Share",
  dropdownAlignment = "dropdown-end"
}: Props = Astro.props;
---

<details class:list={["dropdown", dropdownAlignment]}>
  <summary class:list={[buttonClass, "m-1"]}>{buttonLabel}</summary>
  <ul class="dropdown-content menu p-2 shadow bg-base-100 rounded-box w-60 z-[1]">
    <li><a class="share-link-facebook flex items-center" href="#" target="_blank" rel="noopener noreferrer"><Fragment set:html={svgIconFacebook} /><span class="ml-2">Facebook</span></a></li>
    <li><a class="share-link-twitter flex items-center" href="#" target="_blank" rel="noopener noreferrer"><Fragment set:html={svgIconTwitter} /><span class="ml-2">Twitter/X</span></a></li>
    <li><a class="share-link-linkedin flex items-center" href="#" target="_blank" rel="noopener noreferrer"><Fragment set:html={svgIconLinkedIn} /><span class="ml-2">LinkedIn</span></a></li>
    <li><a class="share-link-telegram flex items-center" href="#" target="_blank" rel="noopener noreferrer"><Fragment set:html={svgIconTelegram} /><span class="ml-2">Telegram</span></a></li>
    <li><a class="share-link-whatsapp flex items-center" href="#" target="_blank" rel="noopener noreferrer"><Fragment set:html={svgIconWhatsApp} /><span class="ml-2">WhatsApp</span></a></li>
    <li><a class="share-link-email flex items-center" href="#"><Fragment set:html={svgIconEmail} /><span class="ml-2">Email</span></a></li>
    <li class="mt-1 pt-1 border-t border-base-300"><a class="share-link-copy flex items-center" href="#"><Fragment set:html={svgIconCopy} /><span class="ml-2">Copy Link</span></a></li>
  </ul>
</details>

<script define:vars={{ initialShareUrl: shareUrl, initialShareTitle: shareTitle }}>
  const scriptTag = document.currentScript;
  let componentRoot = null;

  if (scriptTag) {
    componentRoot = scriptTag.previousElementSibling;
    if (!componentRoot || !componentRoot.matches('details.dropdown')) {
      console.error(
        'StandaloneShareButton: Failed to find details.dropdown as previous sibling.',
        { scriptTag, previousSibling: componentRoot }
      );
      componentRoot = null;
    }
  } else {
    console.error('StandaloneShareButton: document.currentScript is null. The script might be loaded in a way that prevents it from being identified (e.g., module, async/defer).');
  }

  if (componentRoot) {
    const summaryElement = componentRoot.querySelector('summary');

    if (summaryElement) {
      summaryElement.addEventListener('click', (event) => {
        event.stopPropagation();
      });
    }

    const detailsElement = componentRoot; // componentRoot is the <details> element

    const handleDocumentClick = (event) => {
      // Check if the dropdown is open and the click is outside the detailsElement
      if (detailsElement.hasAttribute('open') && !detailsElement.contains(event.target)) {
        detailsElement.removeAttribute('open');
        // The 'toggle' event on detailsElement will automatically handle removing this listener.
      }
    };

    detailsElement.addEventListener('toggle', () => {
      const ulElement = detailsElement.querySelector('ul.dropdown-content.menu');
      if (!ulElement) {
        console.error('StandaloneShareButton: CRITICAL - Could not find ul.dropdown-content.menu inside detailsElement on toggle.');
        return;
      }

      if (detailsElement.hasAttribute('open')) {
        // Add the click listener to the document when the dropdown opens
        // Use a timeout to ensure this listener is added after the current click event cycle has completed.
        // This prevents the click that opened the dropdown from immediately triggering this listener.
        setTimeout(() => {
          document.documentElement.addEventListener('click', handleDocumentClick);
        }, 0);
      } else {
        // Remove the click listener from the document when the dropdown closes
        document.documentElement.removeEventListener('click', handleDocumentClick);
      }
    });

    const shareLinks = {
      facebook: componentRoot.querySelector('.share-link-facebook'),
      twitter: componentRoot.querySelector('.share-link-twitter'),
      linkedin: componentRoot.querySelector('.share-link-linkedin'),
      telegram: componentRoot.querySelector('.share-link-telegram'),
      whatsapp: componentRoot.querySelector('.share-link-whatsapp'),
      email: componentRoot.querySelector('.share-link-email'),
      copy: componentRoot.querySelector('.share-link-copy'),
    };

    const urlToShare = initialShareUrl || window.location.href;
    // For title, attempt to get from prop, then document.title, then a fallback.
    let titleToShare = initialShareTitle || (typeof document !== 'undefined' ? document.title : '');
    // If it's a photo page, try to get a more specific title if one isn't passed.
    if (!initialShareTitle && urlToShare.includes('/photos/') && typeof document !== 'undefined') {
        const h1 = document.querySelector('h1');
        if (h1 && h1.textContent) {
            titleToShare = h1.textContent.trim();
        }
    }


    if (shareLinks.facebook) {
      shareLinks.facebook.href = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(urlToShare)}`;
    }
    if (shareLinks.twitter) {
      shareLinks.twitter.href = `https://twitter.com/intent/tweet?url=${encodeURIComponent(urlToShare)}&text=${encodeURIComponent(titleToShare)}`;
    }
    if (shareLinks.linkedin) {
      shareLinks.linkedin.href = `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(urlToShare)}`;
    }
    if (shareLinks.telegram) {
      shareLinks.telegram.href = `https://t.me/share/url?url=${encodeURIComponent(urlToShare)}&text=${encodeURIComponent(titleToShare)}`;
    }
    if (shareLinks.whatsapp) {
      shareLinks.whatsapp.href = `whatsapp://send?text=${encodeURIComponent(titleToShare + ' ' + urlToShare)}`;
    }
    if (shareLinks.email) {
      const emailSubject = encodeURIComponent(titleToShare);
      const emailBody = encodeURIComponent(`${titleToShare}\n\n${urlToShare}`);
      shareLinks.email.href = `mailto:?subject=${emailSubject}&body=${emailBody}`;
    }

    if (shareLinks.copy) {
      shareLinks.copy.addEventListener('click', (e) => {
        e.preventDefault();
        navigator.clipboard.writeText(urlToShare).then(() => {
          const originalTextElement = shareLinks.copy.querySelector('span');
          if (originalTextElement) {
            const originalText = originalTextElement.textContent;
            originalTextElement.textContent = 'Copied!';
            // Ensure dropdown closes after copying
            if (componentRoot.hasAttribute('open')) {
              componentRoot.removeAttribute('open');
            }
            setTimeout(() => {
              originalTextElement.textContent = originalText;
            }, 2000);
          }
        }).catch(err => console.error('Failed to copy URL: ', err));
      });
    }

    // Close dropdown when a social share link is clicked
    // Exclude "Copy Link" and "Email" from this specific auto-close behavior,
    // as they have their own handling or don't navigate away immediately.
    [
      shareLinks.facebook,
      shareLinks.twitter,
      shareLinks.linkedin,
      shareLinks.telegram,
      shareLinks.whatsapp
    ].forEach(link => {
        if (link) {
            link.addEventListener('click', () => {
                // Use a small delay to allow the link to be processed before closing
                setTimeout(() => {
                    if (componentRoot.hasAttribute('open')) {
                        componentRoot.removeAttribute('open');
                    }
                }, 150);
            });
        }
    });

    // For the email link, we don't want to preventDefault or close the dropdown,
    // as the browser/OS handles opening the mail client.
    // The `href` is already set, so default behavior is fine.
  }
</script>

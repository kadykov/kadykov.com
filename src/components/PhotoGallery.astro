---
import OptimizedImage from './OptimizedImage.astro';
import type { PhotoManifestItem } from '../utils/photoManifestSchema';
import { getImage } from "astro:assets";
import { widthSet as globalWidthSet } from "../utils/widthSet"; // Import global widthSet

interface Props {
  photos: PhotoManifestItem[];
}

const { photos } = Astro.props;
const imageBaseUrl = 'https://share.kadykov.com/';

// Helper function to calculate lightbox widths, moved here to avoid parser issues
function getLightboxWidths(photoWidth: number): number[] {
  const widths = [...new Set(globalWidthSet.filter(w => photoWidth >= w).concat(photoWidth))].sort((a, b) => a - b);
  if (widths.length === 0) {
    widths.push(photoWidth);
  }
  return widths;
}
---

{photos && photos.length > 0 ? (
  // Switched from CSS Grid to Tailwind CSS Columns for masonry-like layout
  // Adjust column counts (columns-2, sm:columns-3, etc.) as needed for desired density.
  // The `space-y-4` on child `<a>` tags will handle vertical spacing if using columns.
  // Or, `gap-4` on the parent div if using `columns` with `break-inside-avoid`.
  <div class="columns-2 sm:columns-3xs gap-4" id="gallery">
    {photos.map(async (photo) => {
      const photoSrc = `${imageBaseUrl}${photo.relativePath}`; // Original JPEG/PNG src
      const altText = photo.title || photo.description || photo.filename;

      const calculatedLightboxWidths = getLightboxWidths(photo.width);

      const avifLightboxImages = await getImage({
        src: photoSrc,
        widths: calculatedLightboxWidths,
        width: photo.width,
        height: photo.height,
        format: 'avif',
      });

      // WebP fallback generation removed as data-pswp-src is now original JPEG.

      // For PhotoSwipe:
      // href: Original JPEG for download via PhotoSwipe's download button.
      // data-pswp-src: Original JPEG. If PhotoSwipe uses this for download (overriding href), this ensures JPEG download.
      //                Also serves as fallback display if AVIF/WebP srcset not supported/used.
      // data-pswp-srcset: AVIF srcset for modern browsers for optimized display.
      // data-pswp-width/height: Original dimensions for PhotoSwipe to calculate aspect ratio.
      const pswpLinkHref = photoSrc;
      const pswpDataSrc = photoSrc; // Changed to photoSrc to ensure JPEG download if data-pswp-src is used by download button
      const pswpWidth = photo.width;
      const pswpHeight = photo.height;
      const pswpSrcset = avifLightboxImages?.srcSet?.attribute;

      // displayWidth for OptimizedImage: Max anticipated rendering width of the thumbnail.
      // For `columns-2 sm:columns-3xs` (sm: 680px, 3xs means 256px wide columns):
      // Max width is ~256px on sm+ screens, or ~50vw on smaller.
      // Set displayWidth to a value slightly larger than 256px for high DPR, e.g. 300px.
      const displayWidth = 300;
      // sizesAttr:
      // - Below sm (680px): 2 columns, so image width is ~50vw.
      // - sm (680px) and above: columns are 256px wide.
      const sizesAttr = '(min-width: 680px) 256px, 50vw';


      return (
        // Added `break-inside-avoid` for CSS columns and `mb-4` for vertical spacing.
        <a
          href={pswpLinkHref}
          data-pswp-src={pswpDataSrc}
          data-pswp-width={pswpWidth}
          data-pswp-height={pswpHeight}
          data-pswp-srcset={pswpSrcset}
          data-title={photo.title || ''}
          data-description={photo.description || ''}
          data-date={photo.dateTaken || ''}
          data-tags={photo.tags?.join(',') || ''}
          target="_blank"
          class="gallery-item block relative overflow-hidden rounded-lg shadow-lg mb-4 break-inside-avoid hover:z-10 transition-transform duration-300 ease-in-out hover:scale-105"
          aria-label={`View image ${altText}`}
        >
          <OptimizedImage
            src={photoSrc}
            alt={altText}
            width={photo.width}
            height={photo.height}
            displayWidth={displayWidth}
            sizesAttr={sizesAttr}
            loading="lazy"
            decoding="async"
            enforceAspectRatio={`${photo.width}:${photo.height}`}
            class="w-full h-auto rounded-lg"
            imgClass="object-cover"
          />
          {/* Overlay removed as per user request to prioritize enlarge hover effect */}
        </a>
      );
    })}
  </div>
) : (
  <p>No photos to display.</p>
)}

<script>
  // This ensures src/scripts/photoswipe.js is processed by Vite/Astro and included in the build.
  // The script itself (photoswipe.js) will then initialize PhotoSwipe on the #gallery.
  import "../scripts/photoswipe.js";
</script>

<style>
  /* .photo-gallery-grid class is no longer used as Tailwind column classes are applied directly to the div */

  .gallery-item {
    background-color: #2d3748; /* Darker placeholder for dark mode, or use theme variable */
    /* For CSS columns, items flow naturally. Aspect ratio is handled by OptimizedImage. */
  }

  /* Styling for the text overlay to ensure readability and better aesthetics */
  .gallery-item .absolute div h3 {
    /* text-shadow: 0 1px 3px rgba(0,0,0,0.5); */
  }
  .gallery-item .absolute div p {
    /* text-shadow: 0 1px 2px rgba(0,0,0,0.5); */
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
  }
</style>

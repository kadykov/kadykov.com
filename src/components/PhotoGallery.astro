---
import OptimizedImage from './OptimizedImage.astro';
import type { PhotoManifestItem } from '../utils/photoManifestSchema';
import { getImage } from "astro:assets";
import { widthSet as globalWidthSet } from "../utils/widthSet"; // Import global widthSet

interface Props {
  photos: PhotoManifestItem[]; // Photos for the current paginated view (thumbnails)
  fullPhotoDataset?: PhotoManifestItem[]; // Optional: Full dataset for PhotoSwipe context
}

const { photos, fullPhotoDataset } = Astro.props;
const imageBaseUrl = 'https://share.kadykov.com/';

// Determine the dataset to use for PhotoSwipe. Fallback to current page's photos if full dataset isn't provided.
const pswpDataset = fullPhotoDataset && fullPhotoDataset.length > 0 ? fullPhotoDataset : photos;

// Prepare a simplified dataset for PhotoSwipe to embed as JSON
// This now includes avifSrcset for each image in the full dataset.
const photoSwipeJsonData = await Promise.all(pswpDataset.map(async (photo) => {
  const photoSrc = `${imageBaseUrl}${photo.relativePath}`;
  const calculatedLightboxWidths = getLightboxWidths(photo.width); // Ensure getLightboxWidths is defined above or passed

  let pswpSrcset = '';
  try {
    const avifLightboxImages = await getImage({
      src: photoSrc,
      widths: calculatedLightboxWidths,
      width: photo.width, // True intrinsic width
      height: photo.height, // True intrinsic height
      format: 'avif',
    });
    pswpSrcset = avifLightboxImages?.srcSet?.attribute || '';
  } catch (e) {
    // console.error(`Failed to generate AVIF srcset for ${photoSrc}:`, e);
    // pswpSrcset will remain empty, PhotoSwipe will use the main 'src'
  }

  // Generate a medium WebP for the main 'src' (fallback for PhotoSwipe display)
  // Aim for max dimension (width or height) around 1600px, maintaining aspect ratio.
  const MAX_DIMENSION = 1600;
  let targetWidth = photo.width;
  let targetHeight = photo.height;

  if (photo.width > MAX_DIMENSION || photo.height > MAX_DIMENSION) {
    if (photo.width / photo.height > 1) { // Landscape or square
      targetWidth = MAX_DIMENSION;
      targetHeight = Math.round((photo.height / photo.width) * targetWidth);
    } else { // Portrait
      targetHeight = MAX_DIMENSION;
      targetWidth = Math.round((photo.width / photo.height) * targetHeight);
    }
  }
  // Ensure dimensions are at least 1px
  targetWidth = Math.max(1, targetWidth);
  targetHeight = Math.max(1, targetHeight);

  let webpSrcForPswp = photoSrc; // Default to original if WebP generation fails
  try {
    const webpPswpDisplayImage = await getImage({
      src: photoSrc,
      width: targetWidth,
      height: targetHeight,
      format: 'webp',
    });
    if (webpPswpDisplayImage?.src) {
      webpSrcForPswp = webpPswpDisplayImage.src;
    }
  } catch (e) {
    // console.error(`Failed to generate WebP display image for ${photoSrc} (target ${targetWidth}x${targetHeight}):`, e);
  }

  // Generate a small WebP for 'msrc' (placeholder) - max width 300px
  const placeholderMaxWidth = 300;
  let msrcPlaceholderWidth = Math.min(placeholderMaxWidth, photo.width);
  let msrcPlaceholderHeight = Math.round((photo.height / photo.width) * msrcPlaceholderWidth);
  // Ensure dimensions are at least 1px
  msrcPlaceholderWidth = Math.max(1, msrcPlaceholderWidth);
  msrcPlaceholderHeight = Math.max(1, msrcPlaceholderHeight);

  let msrcUrl = webpSrcForPswp; // Default to medium WebP if small one fails
   try {
    const placeholderImage = await getImage({
      src: photoSrc,
      width: msrcPlaceholderWidth,
      height: msrcPlaceholderHeight,
      format: 'webp',
    });
    if (placeholderImage?.src) {
      msrcUrl = placeholderImage.src;
    }
  } catch (e) {
    // console.error(`Failed to generate msrc placeholder for ${photoSrc} (target ${msrcPlaceholderWidth}x${msrcPlaceholderHeight}):`, e);
  }

  return {
    downloadUrl: photoSrc, // Original JPEG for download
    src: webpSrcForPswp,   // Optimized WebP for main display fallback
    msrc: msrcUrl,         // Small WebP placeholder
    w: photo.width,        // PhotoSwipe expects 'w' (original dimensions)
    h: photo.height,       // PhotoSwipe expects 'h' (original dimensions)
    srcset: pswpSrcset, // AVIF srcset for PhotoSwipe
    title: photo.title || '',
    description: photo.description || '',
    dateTaken: photo.dateTaken || '',
    tags: photo.tags || [],
    slug: photo.slug || '', // Slug for deep linking
  };
}));

// Helper function to calculate lightbox widths, implementing user's "replace largest" logic.
function getLightboxWidths(photoWidth: number): number[] {
  if (photoWidth <= 0) return []; // Handle invalid photoWidth

  let widths = globalWidthSet.filter(w => w <= photoWidth);

  if (widths.length > 0) {
    // If there are global widths <= photoWidth, remove the largest among them.
    const maxGlobalWidth = Math.max(...widths);
    widths = widths.filter(w => w !== maxGlobalWidth);
  }
  // Always add the actual photoWidth.
  widths.push(photoWidth);

  // Handle cases where photoWidth was very small and widths might be just [photoWidth]
  // or if globalWidthSet was empty.
  if (widths.length === 0 && photoWidth > 0) { // This condition might be redundant due to push(photoWidth)
    widths = [photoWidth];
  }

  return [...new Set(widths)].sort((a, b) => a - b);
}
---

{photos && photos.length > 0 ? (
  // Switched from CSS Grid to Tailwind CSS Columns for masonry-like layout
  // Adjust column counts (columns-2, sm:columns-3, etc.) as needed for desired density.
  // The `space-y-4` on child `<a>` tags will handle vertical spacing if using columns.
  // Or, `gap-4` on the parent div if using `columns` with `break-inside-avoid`.
  <div class="columns-2 sm:columns-3xs gap-4" id="gallery">
    {/* Embed the full dataset for PhotoSwipe, ensuring it's not HTML-escaped */}
    <script is:inline type="application/json" id="photoswipe-data" set:html={JSON.stringify(photoSwipeJsonData)} />
    {/* Using set:html on the script tag itself should work for this.
        Alternatively, <Fragment set:html={`<script type="application/json" id="photoswipe-data">${JSON.stringify(photoSwipeJsonData)}</script>`} />
        But Astro docs suggest set:html can be used directly on elements like <script> or <style>.
        If this doesn't work, we'll try the Fragment approach.
        The `is:inline` is not needed when using `set:html` as `set:html` implies raw content.
    */}

    {/* Render thumbnails for the current page */}
    {photos.map(async (photo, pageSpecificIndex) => {
      // Find the index of this 'photo' within the 'pswpDataset' (which is fullPhotoDataset)
      // This index is crucial if PhotoSwipe uses a JS dataSource.
      const fullDatasetIndex = pswpDataset.findIndex(p => p.slug === photo.slug && p.relativePath === photo.relativePath);

      const photoSrc = `${imageBaseUrl}${photo.relativePath}`; // Original JPEG/PNG src
      const altText = photo.title || photo.description || photo.filename;

      // Retrieve the pre-generated data for this photo from photoSwipeJsonData
      // This avoids re-calculating or re-fetching optimized image URLs for the thumbnail's link
      const pswpEntryForThisPhoto = photoSwipeJsonData.find(entry => entry.slug === photo.slug && entry.downloadUrl === photoSrc);


      const calculatedLightboxWidths = getLightboxWidths(photo.width);

      // Pass the true intrinsic dimensions of the photo to getImage for AVIF srcset for the <a> tag.
      // This is still needed if PhotoSwipe falls back to using data attributes from the <a> tag.
      const avifLightboxImages = await getImage({
        src: photoSrc,
        widths: calculatedLightboxWidths,
        width: photo.width, // True intrinsic width
        height: photo.height, // True intrinsic height
        format: 'avif',
      });

      // For PhotoSwipe:
      // href: Use the pre-generated medium WebP (src from photoSwipeJsonData) for the link.
      // data-pswp-src: Original JPEG (downloadUrl from photoSwipeJsonData).
      // data-pswp-srcset: AVIF srcset (srcset from photoSwipeJsonData).
      // data-pswp-width/height: Original dimensions.

      const pswpLinkHref = pswpEntryForThisPhoto?.src || photoSrc; // Use the 1600px capped WebP, fallback to original
      const pswpDataSrc = pswpEntryForThisPhoto?.downloadUrl || photoSrc; // Original JPEG
      const pswpWidth = photo.width;
      const pswpHeight = photo.height;
      // Use the AVIF srcset generated for the <a> tag directly, or from pswpEntryForThisPhoto if preferred (should be same)
      const pswpSrcset = avifLightboxImages?.srcSet?.attribute || pswpEntryForThisPhoto?.srcset || '';


      // displayWidth for OptimizedImage: Max anticipated rendering width of the thumbnail.
      // For `columns-2 sm:columns-3xs` (sm: 680px, 3xs means 256px wide columns):
      // Max width is ~256px on sm+ screens, or ~50vw on smaller.
      // Set displayWidth to a value slightly larger than 256px for high DPR, e.g. 300px.
      const displayWidth = 300;
      // sizesAttr:
      // - Below sm (680px): 2 columns, so image width is ~50vw.
      // - sm (680px) and above: columns are 256px wide.
      const sizesAttr = '(min-width: 680px) 256px, 50vw';


      return (
        // Added `break-inside-avoid` for CSS columns and `mb-4` for vertical spacing.
        <a
          href={pswpLinkHref}
          data-pswp-src={pswpDataSrc}
          data-pswp-width={pswpWidth}
          data-pswp-height={pswpHeight}
          data-pswp-srcset={pswpSrcset}
          data-title={photo.title || ''}
          data-description={photo.description || ''}
          data-date={photo.dateTaken || ''}
          data-tags={photo.tags?.join(',') || ''}
          data-slug={photo.slug || ''}
          data-pswp-index={fullDatasetIndex === -1 ? pageSpecificIndex : fullDatasetIndex}
          target="_blank"
          class="gallery-item block relative overflow-hidden rounded-md sm:rounded-lg shadow-lg mb-4 break-inside-avoid hover:z-10 transition-transform duration-300 ease-in-out hover:scale-105"
          aria-label={`View image ${altText}`}
        >
          <OptimizedImage
            src={photoSrc}
            alt={altText}
            width={photo.width}
            height={photo.height}
            displayWidth={displayWidth}
            sizesAttr={sizesAttr}
            loading="lazy"
            decoding="async"
            enforceAspectRatio={`${photo.width}:${photo.height}`}
            class="w-full h-auto rounded-md sm:rounded-lg"
            imgClass="object-cover"
          />
          {/* Overlay removed as per user request to prioritize enlarge hover effect */}
        </a>
      );
    })}
  </div>
) : (
  <p>No photos to display.</p>
)}

<script>
  // This ensures src/scripts/photoswipe.js is processed by Vite/Astro and included in the build.
  // The script itself (photoswipe.js) will then initialize PhotoSwipe on the #gallery.
  import "../scripts/photoswipe.js";
</script>

<style>
  /* .photo-gallery-grid class is no longer used as Tailwind column classes are applied directly to the div */

  .gallery-item {
    background-color: #2d3748; /* Darker placeholder for dark mode, or use theme variable */
    /* For CSS columns, items flow naturally. Aspect ratio is handled by OptimizedImage. */
  }

  /* Styling for the text overlay to ensure readability and better aesthetics */
  .gallery-item .absolute div h3 {
    /* text-shadow: 0 1px 3px rgba(0,0,0,0.5); */
  }
  .gallery-item .absolute div p {
    /* text-shadow: 0 1px 2px rgba(0,0,0,0.5); */
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
  }
</style>
